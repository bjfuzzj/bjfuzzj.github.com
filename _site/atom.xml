<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Thornbird Blog</title>
 <link href="http:///atom.xml" rel="self"/>
 <link href="http://"/>
 <updated>2016-11-14T23:06:16+08:00</updated>
 <author>
   <name>thornbird</name>
   <email>wuhanzaizai#126.com</email>
 </author>

 
 <entry>
   <title>使用bootstrap datatimepicker</title>
   <link href="http:///%E6%84%9F%E6%83%B3/usebootstrap-datatimepicker.html"/>
   <updated>2016-11-14T00:00:00+08:00</updated>
   <id>/%E6%84%9F%E6%83%B3/usebootstrap-datatimepicker</id>
   <content type="html">&lt;p&gt;因为是bootstrap V3，在网上只找到一套可以用的&lt;a href=&quot;https://github.com/Eonasdan/bootstrap-datetimepicker&quot;&gt;bootstrap datetimepicker&lt;/a&gt;，建议使用bower来安装。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装Node.js和cnpm
第一次使用bower，所以需要先安装Node.js，翻墙安装各种慢，后来才想起来&lt;a href=&quot;https://npm.taobao.org/mirrors/node&quot;&gt;Node.js的淘宝镜像&lt;/a&gt; , 当然 npm也有镜像。另外推荐使用淘宝定制的cnpm，很方便呀，具体地址在&lt;a href=&quot;http://npm.taobao.org/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照&lt;a href=&quot;https://bower.io/&quot;&gt;bower.js&lt;/a&gt;的安装步骤安装bower.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装好后继续使用bower安装&lt;a href=&quot;https://github.com/Eonasdan/bootstrap-datetimepicker&quot;&gt;bootstrap datatimepicker&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;至于使用就相当方便，相信安装完后都会使用 ^-^&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>sql 执行顺序</title>
   <link href="http:///%E6%84%9F%E6%83%B3/sql-learning.html"/>
   <updated>2016-11-12T00:00:00+08:00</updated>
   <id>/%E6%84%9F%E6%83%B3/sql-learning</id>
   <content type="html">&lt;p&gt;在学习mysql 索引之前，很有必要知道sql的执行顺序，对分析和使用索引有很大的帮助&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(7)     SELECT 
(8)     DISTINCT &amp;lt;select_list&amp;gt;
(1)     FROM &amp;lt;left_table&amp;gt;
(3)     &amp;lt;join_type&amp;gt; JOIN &amp;lt;right_table&amp;gt;
(2)     ON &amp;lt;join_condition&amp;gt;
(4)     WHERE &amp;lt;where_condition&amp;gt;
(5)     GROUP BY &amp;lt;group_by_list&amp;gt;
(6)     HAVING &amp;lt;having_condition&amp;gt;
(9)     ORDER BY &amp;lt;order_by_condition&amp;gt;
(10)    LIMIT &amp;lt;limit_number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行from语句&lt;br&gt;
在这些SQL语句的执行过程中，都会产生一个虚拟表，用来保存SQL语句的执行结果（这是重点），我现在就来跟踪这个虚拟表的变化，得到最终的查询结果的过程，来分析整个SQL逻辑查询的执行顺序和过程。
第一步，执行FROM语句。我们首先需要知道最开始从哪个表开始的，这就是FROM告诉我们的。现在有了&lt;left_table&gt;和&lt;right_table&gt;两个表，我们到底从哪个表开始，还是从两个表进行某种联系以后再开始呢？它们之间如何产生联系呢？——笛卡尔积&lt;/p&gt;

&lt;p&gt;执行ON过滤
执行完笛卡尔积以后，接着就进行ON a.customer&lt;em&gt;id = b.customer&lt;/em&gt;id条件过滤，根据ON中指定的条件，去掉那些不符合条件的数据，得到VT2表(我才知道先执行连表，然后进行on条件过滤，擦,万一第一个表很大，直接连死了，这里还有一个问题，是大表放在前面还是小表放在前面。在mysql高性能书中又看到过讨论这个点有点忘了。)&lt;/p&gt;

&lt;p&gt;执行WHERE过滤
对添加外部行得到的VT3进行WHERE过滤，只有符合&lt;where_condition&gt;的记录才会输出到虚拟表VT4中。当我们执行WHERE a.city = &amp;#39;hangzhou&amp;#39;的时候，就会得到以下内容，并存在虚拟表VT4中;(这里涉及到一个疑问，如果没有使用where语句，但是，有order by 语句的时候 会走索引么？主键索引会走，其他索引不会。)
    由于数据还没有分组，因此现在还不能在WHERE过滤器中使用where_condition=MIN(col)这类对分组统计的过滤；
    由于还没有进行列的选取操作，因此在SELECT中使用列的别名也是不被允许的，如：SELECT city as c FROM t WHERE c=&amp;#39;shanghai&amp;#39;;是不允许出现的。&lt;/p&gt;

&lt;p&gt;执行GROUP BY分组
GROU BY子句主要是对使用WHERE子句得到的虚拟表进行分组操作,得到的内容会存入虚拟表VT5中，此时，我们就得到了一个VT5虚拟表，接下来的操作都会在该表上完成。&lt;/p&gt;

&lt;p&gt;执行HAVING过滤
HAVING子句主要和GROUP BY子句配合使用，对分组得到的VT5虚拟表进行条件过滤&lt;/p&gt;

&lt;p&gt;SELECT列表
现在才会执行到SELECT子句，不要以为SELECT子句被写在第一行，就是第一个被执行的(select 的列会涉及到回表查询，如果select 的列是索引列会直接使用覆盖索引)。&lt;/p&gt;

&lt;p&gt;执行DISTINCT子句
如果在查询中指定了DISTINCT子句，则会创建一张内存临时表（如果内存放不下，就需要存放在硬盘了）。这张临时表的表结构和上一步产生的虚拟表VT7是一样的，不同的是对进行DISTINCT操作的列增加了一个唯一索引，以此来除重复数据。
由于我的测试SQL语句中并没有使用DISTINCT，所以，在该查询中，这一步不会生成一个虚拟表。&lt;/p&gt;

&lt;p&gt;=======后续继续补充=====&lt;/p&gt;

&lt;p&gt;http://www.jellythink.com/archives/924&lt;/p&gt;

&lt;p&gt;执行ORDER BY子句
对虚拟表中的内容按照指定的列进行排序，然后返回一个新的虚拟表，我们执行测试SQL语句中的ORDER BY total_orders DESC
执行LIMIT子句&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果书籍中是有敏感书籍的，需要先在getSensitiveBookId方法中遍历几次,然后再在getBooksWithOutSens方法中 全量遍历N次，总计N+M次(M为敏感书籍的位置)。&lt;/li&gt;
&lt;li&gt;如果书籍中是没有敏感书籍的，需要先在getSensitiveBookId方法中遍历遍历N次，然后在getBooksWithOutSens方法中，遍历0次，总计N次。&lt;/li&gt;
&lt;li&gt;整体看来最少要遍历N次，那么为何不直接遍历呢。&lt;/li&gt;
&lt;li&gt;判断是否存在的目的是减少遍历次数，以后自己使用也要注意。&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>本地安装jekyll踩到的坑</title>
   <link href="http:///%E6%84%9F%E6%83%B3/install-jekyll.html"/>
   <updated>2016-11-12T00:00:00+08:00</updated>
   <id>/%E6%84%9F%E6%83%B3/install-jekyll</id>
   <content type="html">&lt;p&gt;需要在本地安装Jekyll调试下程序，所以尝试在本地安装查看效果。
参考的页面在这里&lt;a href=&quot;http://www.cnblogs.com/kaiye/archive/2013/04/24/3039345.html&quot;&gt;链接&lt;/a&gt;。但是安装后，&lt;code&gt;jekyll s&lt;/code&gt; 后发现N多报错，记录下各个结果：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 报错&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Deprecation: The &amp;#39;pygments&amp;#39; configuration option has been renamed to &amp;#39;highlighter&amp;#39;. Please update your config file accordingly. The allowed values are &amp;#39;rouge&amp;#39;, &amp;#39;pygments&amp;#39; or null.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个是因为 jekyll升级后 ，需要在&lt;code&gt;_config.yml&lt;/code&gt;中的 &lt;code&gt;pygments: true&lt;/code&gt; 改成 &lt;code&gt;highlighter: pygments&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 报错&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Deprecation: Auto-regeneration can no longer be set from your configuration file(s). Use the –[no-]watch/-w command-line option instead.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个的修改办法是 在&lt;code&gt;_config.yml&lt;/code&gt;中的 &lt;code&gt;auto: true&lt;/code&gt; 去掉&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 报错&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Deprecation: You appear to have pagination turned on, but you haven&amp;#39;t included the `jekyll-paginate` gem. Ensure you have `gems: [jekyll-paginate]` in your configuration file. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决办法：在&lt;code&gt;_config.yml&lt;/code&gt;中增加 &lt;code&gt;gems: [jekyll-paginate]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 内容不展示&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;render后，首页的分页posts一直没有展示，paginate 和 paginate&lt;em&gt;path 也配置了，就是没有结果，很奇怪，查看资料后才意识到，pagination是jekyll的分页插件了，需要在`&lt;/em&gt;config.yml&lt;code&gt;中把&lt;/code&gt;safe: true`去掉，因为启动了 safe模式后，插件就失效了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>怎么做数据的对比</title>
   <link href="http:///%E6%84%9F%E6%83%B3/shuju-duibi.html"/>
   <updated>2016-11-11T00:00:00+08:00</updated>
   <id>/%E6%84%9F%E6%83%B3/shuju-duibi</id>
   <content type="html">&lt;p&gt;今天要写文档，比较优化后和优化前的对比情况，当然是要拿数据说话，想到的方案是通过highcharts的方式，往demo里填数据然后随时render出图像，链接&lt;a href=&quot;http://code.hcharts.cn/demos/hhhhD8&quot;&gt;在这里&lt;/a&gt; 。最后的结果如下：
 &lt;img src=&quot;http://ww2.sinaimg.cn/large/006y8mN6gw1f9ontixdk4j30io0cg3za.jpg&quot; alt=&quot;对比结果&quot;&gt; &lt;/p&gt;

&lt;p&gt;当然，这样手动的一条一条的整理只能适合比较小的功能场景，最好将内存的使用情况写入到专门的日志处理系统，然后用统一的处理方式去处理查看，最终的方式可以使用公司的kibana开查看日志，一劳永逸。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>什么时候应该判断是否存在</title>
   <link href="http:///%E6%84%9F%E6%83%B3/php-isexist.html"/>
   <updated>2016-11-10T00:00:00+08:00</updated>
   <id>/%E6%84%9F%E6%83%B3/php-isexist</id>
   <content type="html">&lt;p&gt;今天碰到这样的函数功能，本意是是想过滤掉有敏感信息的书籍。先调用一个方法判断是否有敏感书籍的存在，如果存在就重新过滤，如果不存在就直接返回书籍数组，具体代码如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     public function getSensitiveBookId($bookList)
     {
         $id = 0;
         foreach ($bookList as $book)
         {
             if ($book instanceof Book &amp;amp;&amp;amp; $book-&amp;gt;status = 1)
             {
                 $id = $book-&amp;gt;id;
                 break;
             }
         }
         return $id;
     }


     public function getBooksWithOutSens($bookList)
     {
         $res = array();
         $sensId = $this-&amp;gt;getSensitiveBookId($bookList);
         if($sensId)
         {
             foreach($bookList as $book)
             {
                    if ($book instanceof Book &amp;amp;&amp;amp; $book-&amp;gt;status = 1)
                 {
                     continue;
                 }
                 $res[] = $flow;
             }
         }
         else
         {
             $res = $bookList;
         }

         return $res;
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看完发现问题在哪里呢？分析下各种情况的循环次数来看，假设总图书量为N&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果书籍中是有敏感书籍的，需要先在getSensitiveBookId方法中遍历几次,然后再在getBooksWithOutSens方法中 全量遍历N次，总计N+M次(M为敏感书籍的位置)。&lt;/li&gt;
&lt;li&gt;如果书籍中是没有敏感书籍的，需要先在getSensitiveBookId方法中遍历遍历N次，然后在getBooksWithOutSens方法中，遍历0次，总计N次。&lt;/li&gt;
&lt;li&gt;整体看来最少要遍历N次，那么为何不直接遍历呢。&lt;/li&gt;
&lt;li&gt;判断是否存在的目的是减少遍历次数，以后自己使用也要注意。&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>thornbird的书单</title>
   <link href="http:///%E4%B9%A6%E7%B1%8D/thornbird-book.html"/>
   <updated>2016-01-09T00:00:00+08:00</updated>
   <id>/%E4%B9%A6%E7%B1%8D/thornbird-book</id>
   <content type="html">&lt;p&gt;练习&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;编程之美&lt;/li&gt;
&lt;li&gt;鸟哥的私房菜&lt;/li&gt;
&lt;li&gt;构建高性能web站点&lt;/li&gt;
&lt;li&gt;代码整洁之道&lt;/li&gt;
&lt;li&gt;Go语言编程&lt;/li&gt;
&lt;li&gt;编程之法&lt;/li&gt;
&lt;li&gt;重构 改善既有代码的设计&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;思考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;世界是平的&lt;/li&gt;
&lt;li&gt;创新者的窘境&lt;/li&gt;
&lt;li&gt;影响力&lt;/li&gt;
&lt;li&gt;世界如此险恶 你要内心强大&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;消遣&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一次亲密接触 &lt;/li&gt;
&lt;li&gt;悟空传&lt;/li&gt;
&lt;li&gt;斗破苍穹&lt;/li&gt;
&lt;li&gt;恶魔法则&lt;/li&gt;
&lt;li&gt;微微一笑很倾城&lt;/li&gt;
&lt;li&gt;一句顶一万句&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>